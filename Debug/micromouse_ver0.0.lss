
micromouse_ver0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800122  00800122  000006c6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000118  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fa3  00000000  00000000  00000f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000048a  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ad2  00000000  00000000  0000239f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000022c  00000000  00000000  00002e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000035e  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002fd  00000000  00000000  000033fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  000036fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c1       	rjmp	.+764    	; 0x332 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 33       	cpi	r26, 0x32	; 50
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8d d2       	rcall	.+1306   	; 0x5de <main>
  c4:	a3 c2       	rjmp	.+1350   	; 0x60c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Inti_ADC_get>:

	
	//--------------------------------------------------------------------------------------------------------
	//AD_ch0

	PORTA = 0b10000000;			//LED(ch0)発行
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	82 b9       	out	0x02, r24	; 2
	
	ADMUX = 0b00100000;			//入力をch0に切り替え
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 7c 00 	sts	0x007C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	83 ef       	ldi	r24, 0xF3	; 243
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <Inti_ADC_get+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <Inti_ADC_get+0x14>
  dc:	00 00       	nop
	_delay_us(100);				//切り替えが安定するまで待機

	ADCSRA = 0b11000111;		//AD変換スタート		#6 = 1 にすると変換がスタートする
  de:	87 ec       	ldi	r24, 0xC7	; 199
  e0:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & 0b01000000);	// 変換が終了するまで待つ	変換結果が終わると自動的に#6 = 0になる
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 fd       	sbrc	r24, 6
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <Inti_ADC_get+0x20>
	
	RightFront_Sensor_val = ADCH;	//値を確保
  ee:	80 91 79 00 	lds	r24, 0x0079
  f2:	80 93 23 01 	sts	0x0123, r24

	PORTA = 0b00000000;			//LED発光停止
  f6:	12 b8       	out	0x02, r1	; 2

	//--------------------------------------------------------------------------------------------------------
	//AD_ch1
	
	PORTA = 0b01000000;			//LED(ch1)発光
  f8:	80 e4       	ldi	r24, 0x40	; 64
  fa:	82 b9       	out	0x02, r24	; 2
	
	ADMUX = 0b00100001;			//入力をch1に切り替え
  fc:	81 e2       	ldi	r24, 0x21	; 33
  fe:	80 93 7c 00 	sts	0x007C, r24
 102:	83 ef       	ldi	r24, 0xF3	; 243
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <Inti_ADC_get+0x3e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <Inti_ADC_get+0x44>
 10c:	00 00       	nop
	_delay_us(100);				//切り替えが安定するまで待機
	
	ADCSRA = 0b11000111;		//AD変換スタート		#6 = 1 にすると変換がスタートする
 10e:	87 ec       	ldi	r24, 0xC7	; 199
 110:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & 0b01000000);	//変換が終了するまで待つ	変換結果が終わると自動的に#6 = 0になる
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	86 fd       	sbrc	r24, 6
 11c:	fd cf       	rjmp	.-6      	; 0x118 <Inti_ADC_get+0x50>
	
	Right_Sensor_val = ADCH;	//値を確保
 11e:	80 91 79 00 	lds	r24, 0x0079
 122:	80 93 22 01 	sts	0x0122, r24

	PORTA = 0b00000000;			//LED発光停止
 126:	12 b8       	out	0x02, r1	; 2
	
	//--------------------------------------------------------------------------------------------------------
	//AD_ch2
			
	PORTA = 0b00100000;			//LED(ch2)発光
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	82 b9       	out	0x02, r24	; 2
			
	ADMUX = 0b00100010;			//入力をch2に切り替え
 12c:	82 e2       	ldi	r24, 0x22	; 34
 12e:	80 93 7c 00 	sts	0x007C, r24
 132:	83 ef       	ldi	r24, 0xF3	; 243
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <Inti_ADC_get+0x6e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <Inti_ADC_get+0x74>
 13c:	00 00       	nop
	_delay_us(100);				//切り替えが安定するまで待機

	ADCSRA = 0b11000111;		//AD変換スタート		#6 = 1 にすると変換がスタートする
 13e:	87 ec       	ldi	r24, 0xC7	; 199
 140:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & 0b01000000);	//変換が終了するまで待つ	変換結果が終わると自動的に#6 = 0になる
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	86 fd       	sbrc	r24, 6
 14c:	fd cf       	rjmp	.-6      	; 0x148 <Inti_ADC_get+0x80>
			
	LeftFront_Sensor_val = ADCH;	//値を確保
 14e:	80 91 79 00 	lds	r24, 0x0079
 152:	80 93 24 01 	sts	0x0124, r24

	PORTA = 0b00000000;			//LED発光停止
 156:	12 b8       	out	0x02, r1	; 2
			
	//-------------------------------------------------------------------------------------------------------
	//AD_ch3
			
	PORTA = 0b00010000;			//LED(ch3)発光
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	82 b9       	out	0x02, r24	; 2
			
	ADMUX = 0b00100011;			//入力をch3に切り替え
 15c:	83 e2       	ldi	r24, 0x23	; 35
 15e:	80 93 7c 00 	sts	0x007C, r24
 162:	83 ef       	ldi	r24, 0xF3	; 243
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <Inti_ADC_get+0x9e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <Inti_ADC_get+0xa4>
 16c:	00 00       	nop
	_delay_us(100);				//切り替えが安定するまで待機
			
	ADCSRA = 0b11000111;		//AD変換スタート		#6 = 1 にすると変換がスタートする
 16e:	87 ec       	ldi	r24, 0xC7	; 199
 170:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & 0b01000000);	// 変換が終了するまで待つ	変換結果が終わると自動的に#6 = 0になる
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	86 fd       	sbrc	r24, 6
 17c:	fd cf       	rjmp	.-6      	; 0x178 <Inti_ADC_get+0xb0>

	Left_Sensor_val = ADCH;		//値を確保
 17e:	80 91 79 00 	lds	r24, 0x0079
 182:	80 93 25 01 	sts	0x0125, r24

	PORTA = 0b00000000;			//LED発光停止
 186:	12 b8       	out	0x02, r1	; 2
 188:	08 95       	ret

0000018a <Init_ADC>:
	 *	3,2,1,0: ADチャンネル選択
	 *		このビットをAD変換中にしても変換完了までは実行されない
	 *		とりあえずADC0に設定
	 *		#3 = 0, #2 = 0, #1 = 0, #0 = 0
	 */
	ADMUX = 0b01100000;
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	80 93 7c 00 	sts	0x007C, r24
	 *		機能しないので50kHz〜200KHzのクロック周波数に設定する
	 *		ATmega88Pの動作クロックは20MHzなので、
	 *		20M/128 ==> 156kHzとする　分周は/φ128
	 * 		#2 = 1, #1 = 1, #0 = 1
	 */
	ADCSRA = 0b10000111;
 190:	87 e8       	ldi	r24, 0x87	; 135
 192:	80 93 7a 00 	sts	0x007A, r24
	 *
	 *	2,1,0:	AD変換自動起動要因選択
	 *		連続変換動作
	 *		#2 = 0, #1 = 0, #0 = 0
	 */
	ADCSRB = 0b00000000;
 196:	10 92 7b 00 	sts	0x007B, r1
	 * DIDR0(Digital Input Disable Register 0)
	 *
	 * 7,6,5,4,3,2,1,0: デジタル入力禁止
	 *	
	 */
	DIDR0 = 0b00001111;
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	80 93 7e 00 	sts	0x007E, r24
 1a0:	08 95       	ret

000001a2 <lcd_out>:


//文字を全消去する
void lcd_clear(void)
{
	lcd_cmd(0x01);		//クリアコマンド
 1a2:	48 b1       	in	r20, 0x08	; 8
 1a4:	9c 01       	movw	r18, r24
 1a6:	20 7f       	andi	r18, 0xF0	; 240
 1a8:	34 2f       	mov	r19, r20
 1aa:	3f 70       	andi	r19, 0x0F	; 15
 1ac:	23 2b       	or	r18, r19
 1ae:	28 b9       	out	0x08, r18	; 8
 1b0:	67 2b       	or	r22, r23
 1b2:	21 f4       	brne	.+8      	; 0x1bc <lcd_out+0x1a>
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	99 27       	eor	r25, r25
 1b8:	88 b9       	out	0x08, r24	; 8
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <lcd_out+0x1e>
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	87 e8       	ldi	r24, 0x87	; 135
 1c2:	93 e1       	ldi	r25, 0x13	; 19
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_out+0x22>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_out+0x28>
 1ca:	00 00       	nop
 1cc:	41 9a       	sbi	0x08, 1	; 8
 1ce:	87 e8       	ldi	r24, 0x87	; 135
 1d0:	93 e1       	ldi	r25, 0x13	; 19
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_out+0x30>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_out+0x36>
 1d8:	00 00       	nop
 1da:	41 98       	cbi	0x08, 1	; 8
 1dc:	08 95       	ret

000001de <lcd_cmd>:
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	dc df       	rcall	.-72     	; 0x1a2 <lcd_out>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	82 95       	swap	r24
 1f2:	92 95       	swap	r25
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	98 27       	eor	r25, r24
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	98 27       	eor	r25, r24
 1fc:	d2 df       	rcall	.-92     	; 0x1a2 <lcd_out>
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	97 e2       	ldi	r25, 0x27	; 39
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_cmd+0x24>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_cmd+0x2a>
 208:	00 00       	nop
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <lcd_init>:
 210:	2f e5       	ldi	r18, 0x5F	; 95
 212:	8a ee       	ldi	r24, 0xEA	; 234
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <lcd_init+0x6>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_init+0x10>
 220:	00 00       	nop
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	bb df       	rcall	.-138    	; 0x1a2 <lcd_out>
 22c:	87 ea       	ldi	r24, 0xA7	; 167
 22e:	91 e6       	ldi	r25, 0x61	; 97
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x20>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x26>
 236:	00 00       	nop
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	b0 df       	rcall	.-160    	; 0x1a2 <lcd_out>
 242:	87 e8       	ldi	r24, 0x87	; 135
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x36>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_init+0x3c>
 24c:	00 00       	nop
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	a5 df       	rcall	.-182    	; 0x1a2 <lcd_out>
 258:	87 e8       	ldi	r24, 0x87	; 135
 25a:	93 e1       	ldi	r25, 0x13	; 19
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x4c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x52>
 262:	00 00       	nop
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9a df       	rcall	.-204    	; 0x1a2 <lcd_out>
 26e:	87 e8       	ldi	r24, 0x87	; 135
 270:	93 e1       	ldi	r25, 0x13	; 19
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_init+0x62>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_init+0x68>
 278:	00 00       	nop
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	af df       	rcall	.-162    	; 0x1de <lcd_cmd>
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac df       	rcall	.-168    	; 0x1de <lcd_cmd>
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	a9 df       	rcall	.-174    	; 0x1de <lcd_cmd>
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	a6 df       	rcall	.-180    	; 0x1de <lcd_cmd>
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	a3 df       	rcall	.-186    	; 0x1de <lcd_cmd>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	a0 cf       	rjmp	.-192    	; 0x1de <lcd_cmd>

0000029e <lcd_pos>:
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	21 f4       	brne	.+8      	; 0x2aa <lcd_pos+0xc>
 2a2:	cb 01       	movw	r24, r22
 2a4:	80 58       	subi	r24, 0x80	; 128
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	9a cf       	rjmp	.-204    	; 0x1de <lcd_cmd>
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	21 f4       	brne	.+8      	; 0x2b6 <lcd_pos+0x18>
 2ae:	cb 01       	movw	r24, r22
 2b0:	80 54       	subi	r24, 0x40	; 64
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	94 cf       	rjmp	.-216    	; 0x1de <lcd_cmd>
 2b6:	08 95       	ret

000002b8 <lcd_data>:
	_delay_ms(2);
}

//データを送信する
void lcd_data(int asci)							//4bitずつ送信
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ec 01       	movw	r28, r24
	lcd_out(asci, 1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	6f df       	rcall	.-290    	; 0x1a2 <lcd_out>
	lcd_out(asci << 4, 1);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	ce 01       	movw	r24, r28
 2ca:	82 95       	swap	r24
 2cc:	92 95       	swap	r25
 2ce:	90 7f       	andi	r25, 0xF0	; 240
 2d0:	98 27       	eor	r25, r24
 2d2:	80 7f       	andi	r24, 0xF0	; 240
 2d4:	98 27       	eor	r25, r24
 2d6:	65 df       	rcall	.-310    	; 0x1a2 <lcd_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	89 ef       	ldi	r24, 0xF9	; 249
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_data+0x24>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_data+0x2a>
 2e2:	00 00       	nop
	_delay_ms(0.05);
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <lcd_str>:
	lcd_cmd(0x01);		//クリアコマンド
}

//文字列を送信する
void lcd_str(char *str)
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
	while(*str != '\0'){
 2f0:	88 81       	ld	r24, Y
 2f2:	88 23       	and	r24, r24
 2f4:	31 f0       	breq	.+12     	; 0x302 <lcd_str+0x18>
{
	lcd_cmd(0x01);		//クリアコマンド
}

//文字列を送信する
void lcd_str(char *str)
 2f6:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0'){
		lcd_data(*str);
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	de df       	rcall	.-68     	; 0x2b8 <lcd_data>
}

//文字列を送信する
void lcd_str(char *str)
{
	while(*str != '\0'){
 2fc:	89 91       	ld	r24, Y+
 2fe:	81 11       	cpse	r24, r1
 300:	fb cf       	rjmp	.-10     	; 0x2f8 <lcd_str+0xe>
		lcd_data(*str);
		str++;
	}
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <Inti_Timer0>:
	 *
	 *	1,0: PWM波形の種類の設定(下記のTCCR0Bにも設定が跨っているので注意)
	 *		 8bit高速PWM動作モード
	 *       #1 = 1, #0 = 1
	 */
	TCCR0A = 0b11110011;
 308:	83 ef       	ldi	r24, 0xF3	; 243
 30a:	84 bd       	out	0x24, r24	; 36
	 *         MNCTのサイトでは実用で48kHzがいいらしいので
	 *         今回は48kHzにしてみる
	 *         8MHz/0xFF(255)/8 ==> 約4kHz　計算式はDatasheetを参照
	 *         #2 = 0, #1 = 0, #0 = 1
	 */
	TCCR0B = 0b0000010;
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	85 bd       	out	0x25, r24	; 37
	 * TCNT0(Timer Counter0)
	 *
	 *		タイマカウンタ(8bit)に直接アクセスできる
	 *		初期値をいれる(今回は使用しない)
	 */
	TCNT0 = 0b00000000;
 310:	16 bc       	out	0x26, r1	; 38
	 * OCR0A(Timer Counter0 Output Compare A Register)
	 *
	 *		コンペアマッチAのタイミング設定(8bit)
	 *		default duty 0%
	 */
	OCR0A = 0b00000000;
 312:	17 bc       	out	0x27, r1	; 39
	 * OCR0B(Timer Counter0 Output Compare B Register)
	 *		
	 *		コンペアマッチBのタイミング設定(8bit)
	 *		default dety 0%
	 */
	OCR0B = 0b00000000;
 314:	18 bc       	out	0x28, r1	; 40
 316:	08 95       	ret

00000318 <Inti_Timer2>:
	 *
	 *	1,0: PWM波形の種類の設定(下記のTCCR0Bにも設定が跨っているので注意)
	 *		 8bit高速PWM動作モード
	 *       #1 = 1, #0 = 1
	 */
	TCCR2A = 0b11110011;
 318:	83 ef       	ldi	r24, 0xF3	; 243
 31a:	80 93 b0 00 	sts	0x00B0, r24
	 *         MNCTのサイトでは実用で48kHzがいいらしいので
	 *         今回は48kHzにしてみる
	 *         8MHz/0xFF(255)/8 ==> 約4kHz　計算式はDatasheetを参照
	 *         #2 = 0, #1 = 0, #0 = 1
	 */
	TCCR2B = 0b0000010;
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	80 93 b1 00 	sts	0x00B1, r24
	 * TCNT2(Timer Counter2)
	 *
	 *		タイマカウンタ(8bit)に直接アクセスできる
	 *		初期値をいれる(今回は使用しない)
	 */
	TCNT2 = 0b00000000;
 324:	10 92 b2 00 	sts	0x00B2, r1
	 * OCR2A(Timer Counter2 Output Compare A Register)
	 *
	 *      いつコンペアマッチAをさせるかを設定する(8bit)
	 *		default duty 0%
	 */
	OCR2A = 0b00000000;
 328:	10 92 b3 00 	sts	0x00B3, r1
	 * OCR2B(Timer Counter2 Output Compare B Register)
	 *		
	 *		いつコンペアマッチBをさせるかを設定する(8bit)
	 *		default dety 0%
	 */
	OCR2B = 0b00000000;
 32c:	10 92 b4 00 	sts	0x00B4, r1
 330:	08 95       	ret

00000332 <__vector_13>:
	lcd_data(0x30 + E_Right.dig1000);
	lcd_data(0x30 + E_Right.dig100);
	lcd_data(0x30 + E_Right.dig10);
	lcd_data(0x30 + E_Right.dig1);
	
	lcd_pos(0,0);
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0b b6       	in	r0, 0x3b	; 59
 33e:	0f 92       	push	r0
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
 358:	b7 de       	rcall	.-658    	; 0xc8 <Inti_ADC_get>
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <S_digit_partition>:
 380:	20 91 25 01 	lds	r18, 0x0125
 384:	8d ec       	ldi	r24, 0xCD	; 205
 386:	28 9f       	mul	r18, r24
 388:	91 2d       	mov	r25, r1
 38a:	11 24       	eor	r1, r1
 38c:	96 95       	lsr	r25
 38e:	96 95       	lsr	r25
 390:	96 95       	lsr	r25
 392:	99 0f       	add	r25, r25
 394:	39 2f       	mov	r19, r25
 396:	33 0f       	add	r19, r19
 398:	33 0f       	add	r19, r19
 39a:	93 0f       	add	r25, r19
 39c:	29 1b       	sub	r18, r25
 39e:	20 93 31 01 	sts	0x0131, r18
 3a2:	20 91 25 01 	lds	r18, 0x0125
 3a6:	28 9f       	mul	r18, r24
 3a8:	21 2d       	mov	r18, r1
 3aa:	11 24       	eor	r1, r1
 3ac:	26 95       	lsr	r18
 3ae:	26 95       	lsr	r18
 3b0:	26 95       	lsr	r18
 3b2:	28 9f       	mul	r18, r24
 3b4:	91 2d       	mov	r25, r1
 3b6:	11 24       	eor	r1, r1
 3b8:	96 95       	lsr	r25
 3ba:	96 95       	lsr	r25
 3bc:	96 95       	lsr	r25
 3be:	99 0f       	add	r25, r25
 3c0:	39 2f       	mov	r19, r25
 3c2:	33 0f       	add	r19, r19
 3c4:	33 0f       	add	r19, r19
 3c6:	93 0f       	add	r25, r19
 3c8:	29 1b       	sub	r18, r25
 3ca:	20 93 30 01 	sts	0x0130, r18
 3ce:	20 91 25 01 	lds	r18, 0x0125
 3d2:	99 e2       	ldi	r25, 0x29	; 41
 3d4:	29 9f       	mul	r18, r25
 3d6:	21 2d       	mov	r18, r1
 3d8:	11 24       	eor	r1, r1
 3da:	22 95       	swap	r18
 3dc:	2f 70       	andi	r18, 0x0F	; 15
 3de:	20 93 2f 01 	sts	0x012F, r18
 3e2:	30 91 24 01 	lds	r19, 0x0124
 3e6:	38 9f       	mul	r19, r24
 3e8:	21 2d       	mov	r18, r1
 3ea:	11 24       	eor	r1, r1
 3ec:	26 95       	lsr	r18
 3ee:	26 95       	lsr	r18
 3f0:	26 95       	lsr	r18
 3f2:	22 0f       	add	r18, r18
 3f4:	42 2f       	mov	r20, r18
 3f6:	44 0f       	add	r20, r20
 3f8:	44 0f       	add	r20, r20
 3fa:	24 0f       	add	r18, r20
 3fc:	32 1b       	sub	r19, r18
 3fe:	30 93 2e 01 	sts	0x012E, r19
 402:	30 91 24 01 	lds	r19, 0x0124
 406:	38 9f       	mul	r19, r24
 408:	31 2d       	mov	r19, r1
 40a:	11 24       	eor	r1, r1
 40c:	36 95       	lsr	r19
 40e:	36 95       	lsr	r19
 410:	36 95       	lsr	r19
 412:	38 9f       	mul	r19, r24
 414:	21 2d       	mov	r18, r1
 416:	11 24       	eor	r1, r1
 418:	26 95       	lsr	r18
 41a:	26 95       	lsr	r18
 41c:	26 95       	lsr	r18
 41e:	22 0f       	add	r18, r18
 420:	42 2f       	mov	r20, r18
 422:	44 0f       	add	r20, r20
 424:	44 0f       	add	r20, r20
 426:	24 0f       	add	r18, r20
 428:	32 1b       	sub	r19, r18
 42a:	30 93 2d 01 	sts	0x012D, r19
 42e:	20 91 24 01 	lds	r18, 0x0124
 432:	29 9f       	mul	r18, r25
 434:	21 2d       	mov	r18, r1
 436:	11 24       	eor	r1, r1
 438:	22 95       	swap	r18
 43a:	2f 70       	andi	r18, 0x0F	; 15
 43c:	20 93 2c 01 	sts	0x012C, r18
 440:	30 91 23 01 	lds	r19, 0x0123
 444:	38 9f       	mul	r19, r24
 446:	21 2d       	mov	r18, r1
 448:	11 24       	eor	r1, r1
 44a:	26 95       	lsr	r18
 44c:	26 95       	lsr	r18
 44e:	26 95       	lsr	r18
 450:	22 0f       	add	r18, r18
 452:	42 2f       	mov	r20, r18
 454:	44 0f       	add	r20, r20
 456:	44 0f       	add	r20, r20
 458:	24 0f       	add	r18, r20
 45a:	32 1b       	sub	r19, r18
 45c:	30 93 2b 01 	sts	0x012B, r19
 460:	30 91 23 01 	lds	r19, 0x0123
 464:	38 9f       	mul	r19, r24
 466:	31 2d       	mov	r19, r1
 468:	11 24       	eor	r1, r1
 46a:	36 95       	lsr	r19
 46c:	36 95       	lsr	r19
 46e:	36 95       	lsr	r19
 470:	38 9f       	mul	r19, r24
 472:	21 2d       	mov	r18, r1
 474:	11 24       	eor	r1, r1
 476:	26 95       	lsr	r18
 478:	26 95       	lsr	r18
 47a:	26 95       	lsr	r18
 47c:	22 0f       	add	r18, r18
 47e:	42 2f       	mov	r20, r18
 480:	44 0f       	add	r20, r20
 482:	44 0f       	add	r20, r20
 484:	24 0f       	add	r18, r20
 486:	32 1b       	sub	r19, r18
 488:	30 93 2a 01 	sts	0x012A, r19
 48c:	20 91 23 01 	lds	r18, 0x0123
 490:	29 9f       	mul	r18, r25
 492:	21 2d       	mov	r18, r1
 494:	11 24       	eor	r1, r1
 496:	22 95       	swap	r18
 498:	2f 70       	andi	r18, 0x0F	; 15
 49a:	20 93 29 01 	sts	0x0129, r18
 49e:	30 91 22 01 	lds	r19, 0x0122
 4a2:	38 9f       	mul	r19, r24
 4a4:	21 2d       	mov	r18, r1
 4a6:	11 24       	eor	r1, r1
 4a8:	26 95       	lsr	r18
 4aa:	26 95       	lsr	r18
 4ac:	26 95       	lsr	r18
 4ae:	22 0f       	add	r18, r18
 4b0:	42 2f       	mov	r20, r18
 4b2:	44 0f       	add	r20, r20
 4b4:	44 0f       	add	r20, r20
 4b6:	24 0f       	add	r18, r20
 4b8:	32 1b       	sub	r19, r18
 4ba:	30 93 28 01 	sts	0x0128, r19
 4be:	20 91 22 01 	lds	r18, 0x0122
 4c2:	28 9f       	mul	r18, r24
 4c4:	21 2d       	mov	r18, r1
 4c6:	11 24       	eor	r1, r1
 4c8:	26 95       	lsr	r18
 4ca:	26 95       	lsr	r18
 4cc:	26 95       	lsr	r18
 4ce:	28 9f       	mul	r18, r24
 4d0:	81 2d       	mov	r24, r1
 4d2:	11 24       	eor	r1, r1
 4d4:	86 95       	lsr	r24
 4d6:	86 95       	lsr	r24
 4d8:	86 95       	lsr	r24
 4da:	88 0f       	add	r24, r24
 4dc:	38 2f       	mov	r19, r24
 4de:	33 0f       	add	r19, r19
 4e0:	33 0f       	add	r19, r19
 4e2:	83 0f       	add	r24, r19
 4e4:	28 1b       	sub	r18, r24
 4e6:	20 93 27 01 	sts	0x0127, r18
 4ea:	80 91 22 01 	lds	r24, 0x0122
 4ee:	89 9f       	mul	r24, r25
 4f0:	91 2d       	mov	r25, r1
 4f2:	11 24       	eor	r1, r1
 4f4:	92 95       	swap	r25
 4f6:	9f 70       	andi	r25, 0x0F	; 15
 4f8:	90 93 26 01 	sts	0x0126, r25
 4fc:	08 95       	ret

000004fe <Print_ADC>:
 4fe:	40 df       	rcall	.-384    	; 0x380 <S_digit_partition>
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	f2 de       	rcall	.-540    	; 0x2ea <lcd_str>
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	c7 de       	rcall	.-626    	; 0x29e <lcd_pos>
 510:	80 91 29 01 	lds	r24, 0x0129
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	c0 96       	adiw	r24, 0x30	; 48
 518:	cf de       	rcall	.-610    	; 0x2b8 <lcd_data>
 51a:	80 91 2a 01 	lds	r24, 0x012A
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	c0 96       	adiw	r24, 0x30	; 48
 522:	ca de       	rcall	.-620    	; 0x2b8 <lcd_data>
 524:	80 91 2b 01 	lds	r24, 0x012B
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	c0 96       	adiw	r24, 0x30	; 48
 52c:	c5 de       	rcall	.-630    	; 0x2b8 <lcd_data>
 52e:	64 e0       	ldi	r22, 0x04	; 4
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	b3 de       	rcall	.-666    	; 0x29e <lcd_pos>
 538:	80 91 2c 01 	lds	r24, 0x012C
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	c0 96       	adiw	r24, 0x30	; 48
 540:	bb de       	rcall	.-650    	; 0x2b8 <lcd_data>
 542:	80 91 2d 01 	lds	r24, 0x012D
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	c0 96       	adiw	r24, 0x30	; 48
 54a:	b6 de       	rcall	.-660    	; 0x2b8 <lcd_data>
 54c:	80 91 2e 01 	lds	r24, 0x012E
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	c0 96       	adiw	r24, 0x30	; 48
 554:	b1 de       	rcall	.-670    	; 0x2b8 <lcd_data>
 556:	68 e0       	ldi	r22, 0x08	; 8
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	9f de       	rcall	.-706    	; 0x29e <lcd_pos>
 560:	80 91 2f 01 	lds	r24, 0x012F
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	c0 96       	adiw	r24, 0x30	; 48
 568:	a7 de       	rcall	.-690    	; 0x2b8 <lcd_data>
 56a:	80 91 30 01 	lds	r24, 0x0130
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	c0 96       	adiw	r24, 0x30	; 48
 572:	a2 de       	rcall	.-700    	; 0x2b8 <lcd_data>
 574:	80 91 31 01 	lds	r24, 0x0131
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	c0 96       	adiw	r24, 0x30	; 48
 57c:	9d de       	rcall	.-710    	; 0x2b8 <lcd_data>
 57e:	6c e0       	ldi	r22, 0x0C	; 12
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	8b de       	rcall	.-746    	; 0x29e <lcd_pos>
 588:	80 91 26 01 	lds	r24, 0x0126
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	c0 96       	adiw	r24, 0x30	; 48
 590:	93 de       	rcall	.-730    	; 0x2b8 <lcd_data>
 592:	80 91 27 01 	lds	r24, 0x0127
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	c0 96       	adiw	r24, 0x30	; 48
 59a:	8e de       	rcall	.-740    	; 0x2b8 <lcd_data>
 59c:	80 91 28 01 	lds	r24, 0x0128
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	c0 96       	adiw	r24, 0x30	; 48
 5a4:	89 de       	rcall	.-750    	; 0x2b8 <lcd_data>
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	77 ce       	rjmp	.-786    	; 0x29e <lcd_pos>

000005b0 <Inti_Timer1>:
	//       #3 = 0, #2 = 0
	//
	//	1,0: PWM波形の種類の設定(下記のTCCR1Bにも設定が跨っているので注意)
	//		 CTCモード
	//       #1 = 1, #0 = 0
	TCCR1A = 0b00000010;
 5b0:	22 e0       	ldi	r18, 0x02	; 2
 5b2:	20 93 80 00 	sts	0x0080, r18
	//	2,1,0: 分周器設定
	//         ATmega1284P-AUの動作クロックは20MHz(ヒューズビットで分周設定を解除後)
	//         分周は1/64
	//         20MHz/64 ==> 約312kHz
	//         #2 = 0, #1 = 1, #0 = 1
	TCCR1B = 0b0000100;
 5b6:	84 e0       	ldi	r24, 0x04	; 4
 5b8:	80 93 81 00 	sts	0x0081, r24
	
	//TCNT1(Timer Counter1)
	//		タイマカウンタ(16bit)に直接アクセスできる
	//		初期値をいれる
	TCNT1 = 0;
 5bc:	10 92 85 00 	sts	0x0085, r1
 5c0:	10 92 84 00 	sts	0x0084, r1
	//OCR1A(Timer Counter1 Output Compare A Register)
	//      いつコンペアマッチAをさせるかを設定する(16bit)
	//		今回は1秒カウントしたい
	//      1クロックは78kHz(1.3*10^-5) 30kHzにしたいので。
	//		30*10^-4/1.3*10^-5 = 約230
	OCR1A = 2;
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	90 93 89 00 	sts	0x0089, r25
 5cc:	80 93 88 00 	sts	0x0088, r24
	
	//OCR1B(Timer Counter1 Output Compare B Register)
	//		いつコンペアマッチBをさせるかを設定する(16bit)
	//		今回は使用しない。
	OCR1B = 0;
 5d0:	10 92 8b 00 	sts	0x008B, r1
 5d4:	10 92 8a 00 	sts	0x008A, r1
	//		#1 = 1
	//
	//	0 : 漏れ割り込み許可
	//		使用しないので
	//		#0 = 0
	TIMSK1 = 0b00000010;
 5d8:	20 93 6f 00 	sts	0x006F, r18
 5dc:	08 95       	ret

000005de <main>:
	
}

int main(void)
{		
	cli();		//割り込み禁止
 5de:	f8 94       	cli
	 * 5: 左センサのLED制御 
	 * 6: 右センサのLED制御
	 * 7: 右前センサのLED制御
	 *
	 */
	DDRA  = 0b11110000;
 5e0:	80 ef       	ldi	r24, 0xF0	; 240
 5e2:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00000000;		//ADCで使用する際はプルアップ禁止(値が変化するため)
 5e4:	12 b8       	out	0x02, r1	; 2
	 * 5: 書き込み用ISPに使用(MOSI)
	 * 6: 書き込み用ISPに使用(MISO)
	 * 7: 書き込み用ISPに使用(SCK)
	 *
	 */
	DDRB  = 0b00011000;						
 5e6:	88 e1       	ldi	r24, 0x18	; 24
 5e8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000111;
 5ea:	87 e0       	ldi	r24, 0x07	; 7
 5ec:	85 b9       	out	0x05, r24	; 5
	 * 5: LCD表示用(データバス)
	 * 6: LCD表示用(データバス)
	 * 7: LCD表示用(データバス)
	 *
	 */
	DDRC  = 0b11110011;					
 5ee:	83 ef       	ldi	r24, 0xF3	; 243
 5f0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
 5f2:	18 b8       	out	0x08, r1	; 8
	 * 5: 
	 * 6: 左モーター用PWM出力(PWM出力にするときは必ずDDRを1にすること)
	 * 7: 左モーター用PWM出力(PWM出力にするときは必ずDDRを1にすること)
	 *
	 */
	DDRD  = 0b11000000;
 5f4:	80 ec       	ldi	r24, 0xC0	; 192
 5f6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00001111;			//RE12Dはプルアップ不要らしいが念のためプルアップは有効に
 5f8:	8f e0       	ldi	r24, 0x0F	; 15
 5fa:	8b b9       	out	0x0b, r24	; 11
	
	//LCD初期化
	lcd_init();
 5fc:	09 de       	rcall	.-1006   	; 0x210 <lcd_init>
	
	//タイマレジスタ設定(0:右モーターPWM 1:姿勢制御関係呼び出し 2:左モーターPWM) 
	Inti_Timer0();
 5fe:	84 de       	rcall	.-760    	; 0x308 <Inti_Timer0>
	Inti_Timer2();
 600:	8b de       	rcall	.-746    	; 0x318 <Inti_Timer2>
	Inti_Timer1();
 602:	d6 df       	rcall	.-84     	; 0x5b0 <Inti_Timer1>
	
	//AD変換レジスタ設定
	Init_ADC();
 604:	c2 dd       	rcall	.-1148   	; 0x18a <Init_ADC>
	
	sei();		//割り込み許可
 606:	78 94       	sei
	
	while(1){
		
		//print_RotaryEncorder();
		Print_ADC();
 608:	7a df       	rcall	.-268    	; 0x4fe <Print_ADC>
 60a:	fe cf       	rjmp	.-4      	; 0x608 <main+0x2a>

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
